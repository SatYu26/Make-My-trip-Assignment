version: "3.8"

services:
  # Auth Service
  auth-service:
    build: ./auth-service
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@auth-db:5432/authdb
    depends_on:
      auth-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  auth-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authdb
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Flight Search
  flight-search:
    build: ./flight-search-service
    ports:
      - "4000:4000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@flight-db:5432/flightsdb
    depends_on:
      flight-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  flight-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: flightsdb
    ports:
      - "5433:5432"
    volumes:
      - ./flight-search-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Seat Inventory
  seat-service:
    build: ./seat-service
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@seat-db:5432/seatdb
      - REDIS_URL=redis://redis:6379
    depends_on:
      seat-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  seat-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: seatdb
    ports:
      - "5434:5432"
    volumes:
      - ./seat-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Redis (shared)
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Booking
  booking-service:
    build: ./booking-service
    ports:
      - "6000:6000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@booking-db:5432/bookingdb
      - SEAT_SERVICE_URL=http://seat-service:5000/api/seats/confirm
    depends_on:
      booking-db:
        condition: service_healthy
      seat-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  booking-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bookingdb
    ports:
      - "5435:5432"
    volumes:
      - ./booking-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Payment
  payment-service:
    build: ./payment-service
    ports:
      - "7000:7000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@payment-db:5432/paymentdb
    depends_on:
      payment-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  payment-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: paymentdb
    ports:
      - "5436:5432"
    volumes:
      - ./payment-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Discount
  discount-service:
    build: ./discount-service
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@discount-db:5432/discountdb
    depends_on:
      discount-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  discount-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: discountdb
    ports:
      - "5437:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Ticket
  ticket-service:
    build: ./ticket-service
    ports:
      - "9000:9000"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@ticket-db:5432/ticketdb
      - BOOKING_DATABASE_URL=postgres://postgres:postgres@booking-db:5432/bookingdb
      - JWT_SECRET=your_super_secret_key
    depends_on:
      booking-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s
  ticket-db:
    image: postgres:14
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ticketdb
    ports:
      - "5439:5432"
    volumes:
      - ./ticket-service/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 5s
      retries: 10
      start_period: 20s

  # Notification
  notification-service:
    build: ./notification-service
    ports:
      - "9100:9100"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9100/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s

  # API Gateway
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    restart: always
    environment:
      - AUTH_SERVICE_URL=http://auth-service:3000
      - FLIGHT_SEARCH_URL=http://flight-search:4000
      - SEAT_SERVICE_URL=http://seat-service:5000
      - BOOKING_SERVICE_URL=http://booking-service:6000
      - PAYMENT_SERVICE_URL=http://payment-service:7000
      - DISCOUNT_SERVICE_URL=http://discount-service:8000
      - TICKET_SERVICE_URL=http://ticket-service:9000
      - NOTIFICATION_SERVICE_URL=http://notification-service:9100
    depends_on:
      auth-service:
        condition: service_healthy
      flight-search:
        condition: service_healthy
      seat-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      discount-service:
        condition: service_healthy
      ticket-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 20s
